https://learn.microsoft.com/en-us/cpp/build/overview-of-arm-abi-conventions?view=msvc-160
https://devblogs.microsoft.com/oldnewthing/20210622-00/?p=105332
https://bitbucket.org/csowter/redkernel/src/master/

https://hackaday.com/2021/03/26/bare-metal-stm32-please-mind-the-interrupt-event/
https://vivonomicon.com/2020/06/28/bare-metal-stm32-programming-part-10-uart-communication/
https://www.codeinsideout.com/blog/stm32/task-scheduler/#task-table

https://www.devcoons.com/howto-stm32-custom-bootloader-application/
https://james919.github.io/makefile-mcu

Params
r0, r1, r2, r3

Return value
R0

Calls
BL/BLX LR - return address
pop LR->PC

r4-r10 Non-volatile
r11 - frame pointer
r12 - scratch (volatile)
r13 - SP
R14 - LR
R15 - PC

Memory Layout
RM0385 - 2.2.2
Flash Memory on AXIM interface: 0x0800_0000 to 0x080F_FFFF (1MB)

Solution Layout
Bootloader - 64k, Sector 0/1
Empty - 64k, Sector 2/3
Empty - 128k, Sector 4
App - 512K (on 256k boundary), Sector 5/6
Empty - 256k, Sector 7

Therefore
0x0800_0000 - 0x0801_0000 - Bootloader
0x0801_0000 - 0x0802_0000 - Empty
0x0802_0000 - 0x0803_0000 - Empty
0x0803_0000 - 0x0804_0000 - Empty
0x0804_0000 - 0x080C_0000 - App
0x080C_0000 - 0x0810_0000 - Empty

RTT
https://wiki.segger.com/RTT
https://github.com/SEGGERMicro/RTT
https://www.segger.com/products/debug-probes/j-link/models/other-j-links/st-link-on-board/
https://www.segger.com/products/debug-probes/j-link/technology/about-real-time-transfer/

Things to do


References
https://embeddedexpert.io/?p=474
https://vivonomicon.com/2019/07/05/bare-metal-stm32-programming-part-9-dma-megamix/


SiFive:
https://wiki.osdev.org/HiFive-1_Bare_Bones


Sifive Bringup notes
* __libc_init_array calls _GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv, which calls malloc calls sbrk, allocations are 0 and then 0x948 before main is even called.